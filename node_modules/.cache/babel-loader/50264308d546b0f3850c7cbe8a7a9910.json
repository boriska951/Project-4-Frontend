{"ast":null,"code":"import './App.css';\nimport React, { Component } from 'react';\nimport NewForm from './NewForm';\nimport Nav from './Nav';\nlet baseUrl = \"http://localhost:8000/api/v1/\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getPosts = () => {\n      fetch(baseUrl + \"/home/\", {// credentials:\"include\"\n      }).then(res => {\n        // eslint-disable-next-line no-cond-assign\n        if (res.status = 200) {\n          return res.json;\n        } else {\n          return [];\n        }\n      });\n    };\n\n    this.createPost = newPost => {\n      const copyPosts = [...this.state.posts];\n      copyPosts.push(newPost);\n      this.setState({\n        posts: copyPosts\n      });\n    };\n\n    this.loginUser = async e => {\n      e.preventDefault();\n      const url = baseUrl + '/user/login';\n      const loginBody = {\n        username: e.target.username.value,\n        password: e.target.password.value,\n        email: e.target.email.value\n      };\n\n      try {\n        const response = await fetch(url, {\n          method: 'POST',\n          body: JSON.stringify(loginBody),\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: \"include\"\n        });\n        console.log(response);\n        console.log(\"BODY: \", response.body);\n\n        if (response.status === 200) {\n          this.getPosts();\n        }\n      } catch (err) {\n        console.log('Error => ', err);\n      }\n    };\n\n    this.register = async e => {\n      e.preventDefault();\n      const url = baseUrl + '/users/signup';\n\n      try {\n        const response = await fetch(url, {\n          method: 'POST',\n          body: JSON.stringify({\n            username: e.target.username.value,\n            password: e.target.password.value\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (response.status === 200) {\n          this.getHolidays();\n        }\n      } catch (err) {\n        console.log('Error => ', err);\n      }\n    };\n\n    this.state = {\n      posts: [],\n      modalOpen: false,\n      postsToBeEdited: {},\n      text: \"\",\n      user: \"\",\n      userLoggedIn: false\n    };\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/boris/sei-bromeliad/projects/project4/Project-4-Frontend/src/App.js"],"names":["React","Component","NewForm","Nav","baseUrl","App","constructor","props","getPosts","fetch","then","res","status","json","createPost","newPost","copyPosts","state","posts","push","setState","loginUser","e","preventDefault","url","loginBody","username","target","value","password","email","response","method","body","JSON","stringify","headers","credentials","console","log","err","register","getHolidays","modalOpen","postsToBeEdited","text","user","userLoggedIn"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react'\nimport NewForm from './NewForm'\nimport Nav from './Nav'\n\nlet baseUrl = \"http://localhost:8000/api/v1/\"\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      posts:[],\n      modalOpen: false,\n      postsToBeEdited:{},\n      text:\"\",\n      user:\"\",\n      userLoggedIn: false \n    }\n  }\n\n  getPosts = () => {\n    fetch(baseUrl + \"/home/\",{\n      // credentials:\"include\"\n    })\n    .then(res => {\n      // eslint-disable-next-line no-cond-assign\n      if(res.status=200){\n        return res.json\n      } else {\n        return []\n      }\n    })\n  }\n\n  createPost = (newPost) => {\n    const copyPosts = [...this.state.posts]\n    copyPosts.push(newPost)\n    this.setState({\n      posts:copyPosts\n    })\n  }\n\n  loginUser = async (e) => {\n    e.preventDefault()\n    const url = baseUrl + '/user/login'\n    const loginBody = {\n      username: e.target.username.value,\n      password: e.target.password.value,\n      email: e.target.email.value\n    }\n    try {\n\n      const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(loginBody),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: \"include\"\n      })\n\n      console.log(response)\n      console.log(\"BODY: \",response.body)\n\n      if (response.status === 200) {\n        this.getPosts()\n      }\n    }\n    catch (err) {\n      console.log('Error => ', err);\n    }\n  }\n\n  register = async (e) => {\n    e.preventDefault()\n    const url = baseUrl + '/users/signup'\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          username: e.target.username.value,\n          password: e.target.password.value\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      if (response.status === 200) {\n        this.getHolidays()\n      }\n    }\n    catch (err) {\n      console.log('Error => ', err);\n    }\n  }\n\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}