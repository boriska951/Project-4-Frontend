{"ast":null,"code":"import './App.css';\nimport React, { Component } from 'react';\nimport NewForm from './NewForm';\nimport Nav from './Nav';\nlet baseUrl = \"http://localhost:8000/api/v1/\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getPosts = () => {\n      fetch(baseUrl + \"/home/\", {// credentials:\"include\"\n      }).then(res => {\n        // eslint-disable-next-line no-cond-assign\n        if (res.status = 200) {\n          return res.json;\n        } else {\n          return [];\n        }\n      });\n    };\n\n    this.createPost = newPost => {\n      const copyPosts = [...this.state.posts];\n      copyPosts.push(newPost);\n      this.setState({\n        posts: copyPosts\n      });\n    };\n\n    this.loginUser = async e => {\n      e.preventDefault();\n      const url = baseUrl + '/user/login';\n      const loginBody = {\n        username: e.target.username.value,\n        password: e.target.password.value\n      };\n\n      try {\n        const response = await fetch(url, {\n          method: 'POST',\n          body: JSON.stringify(loginBody),\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: \"include\"\n        });\n        console.log(response);\n        console.log(\"BODY: \", response.body);\n\n        if (response.status === 200) {\n          this.getPosts();\n        }\n      } catch (err) {\n        console.log('Error => ', err);\n      }\n    };\n\n    this.register = async e => {\n      e.preventDefault();\n      const url = baseUrl + '/user/register';\n\n      try {\n        const response = await fetch(url, {\n          method: 'POST',\n          body: JSON.stringify({\n            username: e.target.username.value,\n            password: e.target.password.value,\n            email: e.target.email.value\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (response.status === 200) {\n          this.getPosts();\n        }\n      } catch (err) {\n        console.log('Error => ', err);\n      }\n    };\n\n    this.deletePost = id => {\n      fetch(baseUrl + '/home/' + id, {\n        method: 'DELETE' // credentials: \"include\"\n\n      }).then(res => {\n        const findIndex = this.state.posts.findIndex(post => post._id === id);\n        const copyPosts = [...this.state.posts];\n        copyHolidays.splice(findIndex, 1);\n        this.setState({\n          holidays: copyHolidays\n        });\n      });\n    };\n\n    this.state = {\n      posts: [],\n      modalOpen: false,\n      postsToBeEdited: {},\n      text: \"\",\n      user: \"\",\n      userLoggedIn: false\n    };\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/boris/sei-bromeliad/projects/project4/Project-4-Frontend/src/App.js"],"names":["React","Component","NewForm","Nav","baseUrl","App","constructor","props","getPosts","fetch","then","res","status","json","createPost","newPost","copyPosts","state","posts","push","setState","loginUser","e","preventDefault","url","loginBody","username","target","value","password","response","method","body","JSON","stringify","headers","credentials","console","log","err","register","email","deletePost","id","findIndex","post","_id","copyHolidays","splice","holidays","modalOpen","postsToBeEdited","text","user","userLoggedIn"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react'\nimport NewForm from './NewForm'\nimport Nav from './Nav'\n\nlet baseUrl = \"http://localhost:8000/api/v1/\"\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      posts:[],\n      modalOpen: false,\n      postsToBeEdited:{},\n      text:\"\",\n      user:\"\",\n      userLoggedIn: false \n    }\n  }\n\n  getPosts = () => {\n    fetch(baseUrl + \"/home/\",{\n      // credentials:\"include\"\n    })\n    .then(res => {\n      // eslint-disable-next-line no-cond-assign\n      if(res.status=200){\n        return res.json\n      } else {\n        return []\n      }\n    })\n  }\n\n  createPost = (newPost) => {\n    const copyPosts = [...this.state.posts]\n    copyPosts.push(newPost)\n    this.setState({\n      posts:copyPosts\n    })\n  }\n\n  loginUser = async (e) => {\n    e.preventDefault()\n    const url = baseUrl + '/user/login'\n    const loginBody = {\n      username: e.target.username.value,\n      password: e.target.password.value\n    }\n    try {\n\n      const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(loginBody),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: \"include\"\n      })\n\n      console.log(response)\n      console.log(\"BODY: \",response.body)\n\n      if (response.status === 200) {\n        this.getPosts()\n      }\n    }\n    catch (err) {\n      console.log('Error => ', err);\n    }\n  }\n\n  register = async (e) => {\n    e.preventDefault()\n    const url = baseUrl + '/user/register'\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          username: e.target.username.value,\n          password: e.target.password.value,\n          email: e.target.email.value\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      if (response.status === 200) {\n        this.getPosts()\n      }\n    }\n    catch (err) {\n      console.log('Error => ', err);\n    }\n  }\n\n  deletePost = (id) => {\n    fetch(baseUrl + '/home/' + id, {\n    method: 'DELETE',\n    // credentials: \"include\"\n  }).then( res => {\n    const findIndex = this.state.posts.findIndex(post => post._id === id)\n    const copyPosts = [...this.state.posts]\n    copyHolidays.splice(findIndex, 1)\n    this.setState({\n      holidays: copyHolidays\n    })\n  })\n}\n\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}